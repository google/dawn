name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:

concurrency:
  # Use github.run_id on main branch
  # Use github.event.pull_request.number on pull requests, so it's unique per pull request
  # Use github.ref on other branches, so it's unique per branch
  group: ${{ github.workflow }}-${{ github.ref == 'refs/heads/main' && github.run_id || github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  cmake:
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 6 configurations:
      # 1. <Windows, Debug, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Debug, latest GCC compiler toolchain in the container, default generator>
      # 4. <Linux, Release, latest GCC compiler toolchain in the container, default generator>
      # 5. <MacOS, Debug, latest Clang compiler toolchain on the default runner image, default generator>
      # 6. <MacOS, Release, latest Clang compiler toolchain on the default runner image, default generator>
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        build_type: [Debug, Release]
        toolchain: [gcc, clang, msvc]
        include:
          - os: macos-latest
            toolchain: clang
            c_compiler: $(brew --prefix llvm@15)/bin/clang
            cpp_compiler: $(brew --prefix llvm@15)/bin/clang++
            env:
              MACOSX_DEPLOYMENT_TARGET: "11.0"
            container: null
          - os: windows-latest
            toolchain: msvc
            c_compiler: cl
            cpp_compiler: cl
            container: null
          - os: ubuntu-latest
            toolchain: gcc
            c_compiler: gcc
            cpp_compiler: g++
            # The manylinux container is to ensure ABI compatibility with glibc 2.28.
            # This way, the continuous delivery process casts a wide net across many linux distros.
            container: dockcross/manylinux_2_28-x64:latest
        exclude:
            - os: macos-latest
              toolchain: msvc
            - os: macos-latest
              toolchain: gcc
            - os: ubuntu-latest
              toolchain: msvc
            - os: ubuntu-latest
              toolchain: clang
            - os: windows-latest
              toolchain: clang
            - os: windows-latest
              toolchain: gcc

    name: CMake-${{ matrix.os }}-${{ matrix.build_type }}-${{ matrix.toolchain }}
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}
    env:
      SCCACHE_GHA_ENABLED: "true"

    steps:
    - uses: actions/checkout@v4

    - name: Set up dependencies on linux
      if: matrix.container == 'dockcross/manylinux_2_28-x64:latest'
      run: >
        dnf install -y mesa-libGL-devel libxcb libxcb-devel libX11-xcb libXcursor-devel libXrandr-devel libXinerama-devel libXi-devel libXext-devel libxkbcommon libxkbcommon-devel libxkbcommon-x11-devel mesa-vulkan-drivers wayland-protocols-devel wayland-devel

    - name: Set up sccache
      # dawn-ci.cmake documents why sccache is not used in other platforms.
      if: matrix.os == 'ubuntu-latest'
      uses: mozilla-actions/sccache-action@v0.0.5

    - name: Configure CMake
      run: >
        cmake
        -S .
        -B out/${{ matrix.build_type }}
        -C .github/workflows/dawn-ci.cmake
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}

    - name: Build
      run: cmake --build out/${{ matrix.build_type }} --config ${{ matrix.build_type }}

    - name: Package
      run: |
        cmake --install out/${{ matrix.build_type }} --config ${{ matrix.build_type }} --prefix Dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}
        cmake -E tar cvzf Dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz Dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: Dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}
        path: Dawn-${{ github.sha }}-${{ matrix.os }}-${{ matrix.build_type }}.tar.gz
  
  mobile:
    strategy:
      fail-fast: false
      matrix:
        include:
          # Android builds
          - platform: android
            arch: arm64-v8a
            toolchain_file: $ANDROID_NDK/build/cmake/android.toolchain.cmake
            cmake_args: -DANDROID_ABI=arm64-v8a -DANDROID_PLATFORM=android-26
            output_dir: out/android_arm64-v8a
            library_path: src/dawn/native/libwebgpu_dawn.so
            strip_tool: $ANDROID_NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip
          - platform: android
            arch: armeabi-v7a
            toolchain_file: $ANDROID_NDK/build/cmake/android.toolchain.cmake
            cmake_args: -DANDROID_ABI=armeabi-v7a -DANDROID_PLATFORM=android-26
            output_dir: out/android_armeabi-v7a
            library_path: src/dawn/native/libwebgpu_dawn.so
            strip_tool: $ANDROID_NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip
          - platform: android
            arch: x86
            toolchain_file: $ANDROID_NDK/build/cmake/android.toolchain.cmake
            cmake_args: -DANDROID_ABI=x86 -DANDROID_PLATFORM=android-26
            output_dir: out/android_x86
            library_path: src/dawn/native/libwebgpu_dawn.so
            strip_tool: $ANDROID_NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip
          - platform: android
            arch: x86_64
            toolchain_file: $ANDROID_NDK/build/cmake/android.toolchain.cmake
            cmake_args: -DANDROID_ABI=x86_64 -DANDROID_PLATFORM=android-26
            output_dir: out/android_x86_64
            library_path: src/dawn/native/libwebgpu_dawn.so
            strip_tool: $ANDROID_NDK/toolchains/llvm/prebuilt/darwin-x86_64/bin/llvm-strip
          # iOS builds
          - platform: ios
            arch: arm64
            toolchain_file: build-tools/apple.toolchain.cmake
            cmake_args: -DPLATFORM=OS64 -DDEPLOYMENT_TARGET=13.0 -DENABLE_BITCODE=OFF -DENABLE_ARC=OFF -DENABLE_VISIBILITY=OFF
            output_dir: out/ios_arm64
            library_path: src/dawn/native/libwebgpu_dawn.a
          - platform: ios
            arch: sim_arm64
            toolchain_file: build-tools/apple.toolchain.cmake
            cmake_args: -DPLATFORM=SIMULATORARM64 -DDEPLOYMENT_TARGET=13.0 -DENABLE_BITCODE=OFF -DENABLE_ARC=OFF -DENABLE_VISIBILITY=OFF
            output_dir: out/ios_sim_arm64
            library_path: src/dawn/native/libwebgpu_dawn.a
          - platform: ios
            arch: sim_x86_64
            toolchain_file: build-tools/apple.toolchain.cmake
            cmake_args: -DPLATFORM=SIMULATOR64 -DDEPLOYMENT_TARGET=13.0 -DENABLE_BITCODE=OFF -DENABLE_ARC=OFF -DENABLE_VISIBILITY=OFF
            output_dir: out/ios_sim_x86_64
            library_path: src/dawn/native/libwebgpu_dawn.a
          - platform: macos
            arch: universal
            toolchain_file: build-tools/apple.toolchain.cmake
            cmake_args: -DPLATFORM=MAC_UNIVERSAL -DDEPLOYMENT_TARGET=11.0 -DENABLE_BITCODE=OFF -DENABLE_ARC=OFF -DENABLE_VISIBILITY=OFF
            output_dir: out/macos_universal
            library_path: src/dawn/native/libwebgpu_dawn.a

    name: Build-${{ matrix.platform }}-${{ matrix.arch }}
    runs-on: macos-latest-large
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Apply iOS static library patch
        run: |
          # iOS/macOS cannot ship dynamic libraries (.dylib) in XCFrameworks - they must be static libraries (.a)
          # This patch modifies Dawn's CMake to build static libraries for Apple platforms instead of shared libraries
          cat > bundle_libraries.patch << 'EOF'
          --- a/src/cmake/BundleLibraries.cmake
          +++ b/src/cmake/BundleLibraries.cmake
          @@ -66,8 +66,11 @@ function(bundle_libraries output_target)
               endif()
             endforeach()
           
          -  add_library(${output_target} SHARED ${all_objects})
          -
          +  if(${CMAKE_SYSTEM_NAME} STREQUAL "iOS" OR ${CMAKE_SYSTEM_NAME} STREQUAL "visionOS" OR ${CMAKE_SYSTEM_NAME} STREQUAL "Darwin")
          +    add_library(${output_target} STATIC ${all_objects})
          +  else()
          +    add_library(${output_target} SHARED ${all_objects})
          +  endif()
             add_dependencies(${output_target} ${ARGN})
           
           endfunction()
          EOF
          
          # Apply the patch
          patch -p1 < bundle_libraries.patch

      - name: Setup Android NDK
        if: matrix.platform == 'android'
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d
  
      - name: Set ANDROID_NDK
        if: matrix.platform == 'android'
        run: echo "ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
  
      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master
    
      - name: Download Apple toolchain
        if: matrix.platform != 'android'
        run: |
          mkdir -p build-tools
          # Download the ios-cmake toolchain file
          curl -L https://raw.githubusercontent.com/leetal/ios-cmake/master/ios.toolchain.cmake -o build-tools/apple.toolchain.cmake
    
      - name: Build ${{ matrix.platform }} ${{ matrix.arch }}
        run: |
          cmake -S . -B ${{ matrix.output_dir }} -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=${{ matrix.toolchain_file }} \
            ${{ matrix.cmake_args }} \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SAMPLES=OFF \
            -DTINT_BUILD_TESTS=OFF \
            -DTINT_BUILD_CMD_TOOLS=OFF \
            -DTINT_BUILD_IR_BINARY=OFF \
            -DDAWN_BUILD_SAMPLES=OFF \
            -DDAWN_USE_GLFW=OFF \
            -DDAWN_FETCH_DEPENDENCIES=ON \
            -DDAWN_BUILD_MONOLITHIC_LIBRARY=ON \
            -DDAWN_ENABLE_OPENGLES=OFF \
            -DDAWN_ENABLE_DESKTOP_GL=OFF
          ninja -C ${{ matrix.output_dir }}
    
      - name: Strip Android binaries
        if: matrix.platform == 'android'
        run: |
          ${{ matrix.strip_tool }} ${{ matrix.output_dir }}/${{ matrix.library_path }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.platform }}-${{ matrix.arch }}
          path: ${{ matrix.output_dir }}/${{ matrix.library_path }}

  package-mobile:
    name: Package Mobile Artifacts
    runs-on: macos-latest
    needs: mobile
    steps:
      - uses: actions/checkout@v4

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: build-*
          path: artifacts

      - name: Setup Android NDK (for header generation)
        id: setup-ndk
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r26d

      - name: Set ANDROID_NDK
        run: echo "ANDROID_NDK=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV

      - name: Setup Ninja
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Generate headers (using one Android build)
        run: |
          cmake -S . -B out/headers -G Ninja \
            -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK/build/cmake/android.toolchain.cmake \
            -DANDROID_ABI=arm64-v8a \
            -DANDROID_PLATFORM=android-26 \
            -DCMAKE_BUILD_TYPE=Release \
            -DBUILD_SAMPLES=OFF \
            -DTINT_BUILD_TESTS=OFF \
            -DTINT_BUILD_CMD_TOOLS=OFF \
            -DTINT_BUILD_IR_BINARY=OFF \
            -DDAWN_BUILD_SAMPLES=OFF \
            -DDAWN_USE_GLFW=OFF \
            -DDAWN_FETCH_DEPENDENCIES=ON \
            -DDAWN_BUILD_MONOLITHIC_LIBRARY=ON \
            -DDAWN_ENABLE_OPENGLES=OFF \
            -DDAWN_ENABLE_DESKTOP_GL=OFF

      - name: Create iOS Simulator fat binary
        run: |
          mkdir -p libs/apple/iphonesimulator
          lipo -create \
            artifacts/build-ios-sim_x86_64/libwebgpu_dawn.a \
            artifacts/build-ios-sim_arm64/libwebgpu_dawn.a \
            -output libs/apple/iphonesimulator/libwebgpu_dawn.a

      - name: Create XCFramework
        run: |
          xcodebuild -create-xcframework \
            -library libs/apple/iphonesimulator/libwebgpu_dawn.a \
            -library artifacts/build-ios-arm64/libwebgpu_dawn.a \
            -library artifacts/build-macos-universal/libwebgpu_dawn.a \
            -output Dawn-${{ github.sha }}-Apple.xcframework

      - name: Copy headers
        run: |
          mkdir -p Dawn-${{ github.sha }}-headers/webgpu
          mkdir -p Dawn-${{ github.sha }}-headers/dawn
          cp -a out/headers/gen/include/webgpu/* Dawn-${{ github.sha }}-headers/webgpu/
          cp -a out/headers/gen/include/dawn/* Dawn-${{ github.sha }}-headers/dawn/
          cp -a include/webgpu/* Dawn-${{ github.sha }}-headers/webgpu/
          cp -a include/dawn/* Dawn-${{ github.sha }}-headers/dawn/
          cp src/dawn/dawn.json Dawn-${{ github.sha }}-headers/

      - name: Package Android libraries
        run: |
          mkdir -p Dawn-${{ github.sha }}-Android/arm64-v8a
          mkdir -p Dawn-${{ github.sha }}-Android/armeabi-v7a
          mkdir -p Dawn-${{ github.sha }}-Android/x86
          mkdir -p Dawn-${{ github.sha }}-Android/x86_64
          
          cp artifacts/build-android-arm64-v8a/libwebgpu_dawn.so Dawn-${{ github.sha }}-Android/arm64-v8a/
          cp artifacts/build-android-armeabi-v7a/libwebgpu_dawn.so Dawn-${{ github.sha }}-Android/armeabi-v7a/
          cp artifacts/build-android-x86/libwebgpu_dawn.so Dawn-${{ github.sha }}-Android/x86/
          cp artifacts/build-android-x86_64/libwebgpu_dawn.so Dawn-${{ github.sha }}-Android/x86_64/

      - name: Create archives
        run: |
          tar -czf Dawn-${{ github.sha }}-Android.tar.gz Dawn-${{ github.sha }}-Android
          tar -czf Dawn-${{ github.sha }}-Apple.xcframework.tar.gz Dawn-${{ github.sha }}-Apple.xcframework
          tar -czf Dawn-${{ github.sha }}-headers.tar.gz Dawn-${{ github.sha }}-headers

      - name: Upload Android artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Dawn-${{ github.sha }}-Android
          path: Dawn-${{ github.sha }}-Android.tar.gz

      - name: Upload Apple artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Dawn-${{ github.sha }}-Apple
          path: Dawn-${{ github.sha }}-Apple.xcframework.tar.gz

      - name: Upload headers
        uses: actions/upload-artifact@v4
        with:
          name: Dawn-${{ github.sha }}-headers
          path: Dawn-${{ github.sha }}-headers.tar.gz

  golang:
    name: Go Build and Test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.18'

    - name: Build
      run: go build -v ./...

    - name: Test
      run: go test -v ./...
