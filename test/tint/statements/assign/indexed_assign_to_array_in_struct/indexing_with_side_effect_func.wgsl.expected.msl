#include <metal_stdlib>
using namespace metal;

struct Uniforms {
  /* 0x0000 */ uint i;
  /* 0x0004 */ uint j;
};

struct tint_module_vars_struct {
  thread uint* nextIndex;
  const constant Uniforms* uniforms;
};

struct InnerS {
  int v;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct S1 {
  tint_array<InnerS, 8> a2;
};

struct OuterS {
  tint_array<S1, 8> a1;
};

uint getNextIndex(tint_module_vars_struct tint_module_vars) {
  (*tint_module_vars.nextIndex) = ((*tint_module_vars.nextIndex) + 1u);
  return (*tint_module_vars.nextIndex);
}

kernel void v_1(const constant Uniforms* uniforms [[buffer(0)]]) {
  thread uint nextIndex = 0u;
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.nextIndex=(&nextIndex), .uniforms=uniforms};
  InnerS v = {};
  OuterS s = {};
  uint const v_2 = getNextIndex(tint_module_vars);
  s.a1[min(v_2, 7u)].a2[min((*tint_module_vars.uniforms).j, 7u)] = v;
}
