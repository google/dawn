#include <metal_stdlib>
using namespace metal;

struct Uniforms {
  /* 0x0000 */ uint i;
  /* 0x0004 */ uint j;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct InnerS {
  /* 0x0000 */ int v;
};

struct S1 {
  /* 0x0000 */ tint_array<InnerS, 8> a2;
};

struct OuterS {
  /* 0x0000 */ tint_array<S1, 1> a1;
};

struct tint_module_vars_struct {
  const constant Uniforms* uniforms;
  device OuterS* s;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_1;
};

kernel void v_1(const constant Uniforms* uniforms [[buffer(0)]], device OuterS* s [[buffer(1)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms, .s=s, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  tint_array_lengths_struct const v_2 = tint_array_lengths_struct{.tint_array_length_0_1=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 32u)};
  InnerS v = {};
  (*tint_module_vars.s).a1[min((*tint_module_vars.uniforms).i, (v_2.tint_array_length_0_1 - 1u))].a2[min((*tint_module_vars.uniforms).j, 7u)] = v;
}
