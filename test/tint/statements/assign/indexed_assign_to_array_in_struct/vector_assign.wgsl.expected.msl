#include <metal_stdlib>
using namespace metal;

struct Uniforms {
  /* 0x0000 */ uint i;
};

struct tint_module_vars_struct {
  const constant Uniforms* uniforms;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct OuterS {
  tint_array<uint, 8> a1;
};

uint f(uint i) {
  return (i + 1u);
}

kernel void v_1(const constant Uniforms* uniforms [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms};
  OuterS s1 = {};
  float3 v = 0.0f;
  v[min(s1.a1[min((*tint_module_vars.uniforms).i, 7u)], 2u)] = 1.0f;
  v[min(f(s1.a1[min((*tint_module_vars.uniforms).i, 7u)]), 2u)] = 1.0f;
}
