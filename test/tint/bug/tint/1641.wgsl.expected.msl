#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Normals {
  float3 f;
};

struct main_outputs {
  float4 tint_symbol [[position]];
};
const constant tint_array<Normals, 1> v = tint_array<Normals, 1>{Normals{.f=float3(0.0f, 0.0f, 1.0f)}};

float4 main_inner() {
  int const zero = 0;
  return float4(v[min(uint(zero), 0u)].f, 1.0f);
}

vertex main_outputs v_1() {
  main_outputs tint_wrapper_result = {};
  tint_wrapper_result.tint_symbol = main_inner();
  return tint_wrapper_result;
}
