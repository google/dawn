//
// main_count
//
#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Uniforms_packed_vec3 {
  /* 0x0000 */ uint numTriangles;
  /* 0x0004 */ uint gridSize;
  /* 0x0008 */ uint pad1;
  /* 0x000c */ uint pad2;
  /* 0x0010 */ packed_float3 bbMin;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad;
  /* 0x0020 */ packed_float3 bbMax;
  /* 0x002c */ tint_array<int8_t, 4> tint_pad_1;
};

struct U32s {
  /* 0x0000 */ tint_array<uint, 1> values;
};

struct F32s {
  /* 0x0000 */ tint_array<float, 1> values;
};

struct AU32s {
  /* 0x0000 */ tint_array<atomic_uint, 1> values;
};

struct AI32s {
  /* 0x0000 */ tint_array<atomic_int, 1> values;
};

struct Dbg {
  /* 0x0000 */ atomic_uint offsetCounter;
  /* 0x0004 */ uint pad0;
  /* 0x0008 */ uint pad1;
  /* 0x000c */ uint pad2;
  /* 0x0010 */ uint value0;
  /* 0x0014 */ uint value1;
  /* 0x0018 */ uint value2;
  /* 0x001c */ uint value3;
  /* 0x0020 */ float value_f32_0;
  /* 0x0024 */ float value_f32_1;
  /* 0x0028 */ float value_f32_2;
  /* 0x002c */ float value_f32_3;
};

struct tint_module_vars_struct {
  const constant Uniforms_packed_vec3* uniforms;
  device U32s* indices;
  device F32s* positions;
  device AU32s* counters;
  device AI32s* LUT;
  device Dbg* dbg;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_2;
  uint tint_array_length_0_3;
  uint tint_array_length_0_1;
  uint tint_array_length_0_4;
};

float3 toVoxelPos(float3 position, tint_module_vars_struct tint_module_vars) {
  float3 bbMin = float3((*tint_module_vars.uniforms).bbMin.x, (*tint_module_vars.uniforms).bbMin.y, (*tint_module_vars.uniforms).bbMin.z);
  float3 bbMax = float3((*tint_module_vars.uniforms).bbMax.x, (*tint_module_vars.uniforms).bbMax.y, (*tint_module_vars.uniforms).bbMax.z);
  float3 bbSize = (bbMax - bbMin);
  float cubeSize = max(max(bbSize.x, bbSize.y), bbSize.z);
  float gridSize = float((*tint_module_vars.uniforms).gridSize);
  float gx = ((gridSize * (position.x - (*tint_module_vars.uniforms).bbMin.x)) / cubeSize);
  float gy = ((gridSize * (position.y - (*tint_module_vars.uniforms).bbMin.y)) / cubeSize);
  float gz = ((gridSize * (position.z - (*tint_module_vars.uniforms).bbMin.z)) / cubeSize);
  return float3(gx, gy, gz);
}

uint3 tint_v3f32_to_v3u32(float3 value) {
  return uint3(clamp(value, float3(0.0f), float3(4294967040.0f)));
}

uint toIndex1D(uint gridSize, float3 voxelPos) {
  uint3 icoord = tint_v3f32_to_v3u32(voxelPos);
  return ((icoord.x + (gridSize * icoord.y)) + ((gridSize * gridSize) * icoord.z));
}

float3 loadPosition(uint vertexIndex, tint_array_lengths_struct tint_array_lengths, tint_module_vars_struct tint_module_vars) {
  float3 position = float3((*tint_module_vars.positions).values[min(((3u * vertexIndex) + 0u), (tint_array_lengths.tint_array_length_0_2 - 1u))], (*tint_module_vars.positions).values[min(((3u * vertexIndex) + 1u), (tint_array_lengths.tint_array_length_0_2 - 1u))], (*tint_module_vars.positions).values[min(((3u * vertexIndex) + 2u), (tint_array_lengths.tint_array_length_0_2 - 1u))]);
  return position;
}

void doIgnore(tint_array_lengths_struct tint_array_lengths, tint_module_vars_struct tint_module_vars) {
  uint g42 = (*tint_module_vars.uniforms).numTriangles;
  uint kj6 = (*tint_module_vars.dbg).value1;
  uint b53 = atomic_load_explicit((&(*tint_module_vars.counters).values[min(uint(0), (tint_array_lengths.tint_array_length_0_3 - 1u))]), memory_order_relaxed);
  uint rwg = (*tint_module_vars.indices).values[min(uint(0), (tint_array_lengths.tint_array_length_0_1 - 1u))];
  float rb5 = (*tint_module_vars.positions).values[min(uint(0), (tint_array_lengths.tint_array_length_0_2 - 1u))];
  int g55 = atomic_load_explicit((&(*tint_module_vars.LUT).values[min(uint(0), (tint_array_lengths.tint_array_length_0_4 - 1u))]), memory_order_relaxed);
}

void main_count_inner(uint3 GlobalInvocationID, tint_module_vars_struct tint_module_vars) {
  tint_array_lengths_struct const v = tint_array_lengths_struct{.tint_array_length_0_2=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].y - 0u) / 4u), .tint_array_length_0_3=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].z - 0u) / 4u), .tint_array_length_0_1=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 4u), .tint_array_length_0_4=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].w - 0u) / 4u)};
  uint triangleIndex = GlobalInvocationID.x;
  if ((triangleIndex >= (*tint_module_vars.uniforms).numTriangles)) {
    return;
  }
  doIgnore(v, tint_module_vars);
  uint i0 = (*tint_module_vars.indices).values[min(((3u * triangleIndex) + 0u), (v.tint_array_length_0_1 - 1u))];
  uint i1 = (*tint_module_vars.indices).values[min(((3u * triangleIndex) + 1u), (v.tint_array_length_0_1 - 1u))];
  uint i2 = (*tint_module_vars.indices).values[min(((3u * triangleIndex) + 2u), (v.tint_array_length_0_1 - 1u))];
  float3 p0 = loadPosition(i0, v, tint_module_vars);
  float3 p1 = loadPosition(i1, v, tint_module_vars);
  float3 p2 = loadPosition(i2, v, tint_module_vars);
  float3 center = (((p0 + p1) + p2) / 3.0f);
  float3 voxelPos = toVoxelPos(center, tint_module_vars);
  uint voxelIndex = toIndex1D((*tint_module_vars.uniforms).gridSize, voxelPos);
  uint acefg = atomic_fetch_add_explicit((&(*tint_module_vars.counters).values[min(voxelIndex, (v.tint_array_length_0_3 - 1u))]), 1u, memory_order_relaxed);
  if ((triangleIndex == 0u)) {
    (*tint_module_vars.dbg).value0 = (*tint_module_vars.uniforms).gridSize;
    (*tint_module_vars.dbg).value_f32_0 = center.x;
    (*tint_module_vars.dbg).value_f32_1 = center.y;
    (*tint_module_vars.dbg).value_f32_2 = center.z;
  }
}

kernel void main_count(uint3 GlobalInvocationID [[thread_position_in_grid]], const constant Uniforms_packed_vec3* uniforms [[buffer(0)]], device U32s* indices [[buffer(1)]], device F32s* positions [[buffer(2)]], device AU32s* counters [[buffer(3)]], device AI32s* LUT [[buffer(4)]], device Dbg* dbg [[buffer(5)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms, .indices=indices, .positions=positions, .counters=counters, .LUT=LUT, .dbg=dbg, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  main_count_inner(GlobalInvocationID, tint_module_vars);
}
//
// main_create_lut
//
#include <metal_stdlib>
using namespace metal;

struct tint_array_lengths_struct {
  uint tint_array_length_0_3;
  uint tint_array_length_0_1;
  uint tint_array_length_0_2;
  uint tint_array_length_0_4;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Uniforms_packed_vec3 {
  /* 0x0000 */ uint numTriangles;
  /* 0x0004 */ uint gridSize;
  /* 0x0008 */ uint pad1;
  /* 0x000c */ uint pad2;
  /* 0x0010 */ packed_float3 bbMin;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad;
  /* 0x0020 */ packed_float3 bbMax;
  /* 0x002c */ tint_array<int8_t, 4> tint_pad_1;
};

struct U32s {
  /* 0x0000 */ tint_array<uint, 1> values;
};

struct F32s {
  /* 0x0000 */ tint_array<float, 1> values;
};

struct AU32s {
  /* 0x0000 */ tint_array<atomic_uint, 1> values;
};

struct AI32s {
  /* 0x0000 */ tint_array<atomic_int, 1> values;
};

struct Dbg {
  /* 0x0000 */ atomic_uint offsetCounter;
  /* 0x0004 */ uint pad0;
  /* 0x0008 */ uint pad1;
  /* 0x000c */ uint pad2;
  /* 0x0010 */ uint value0;
  /* 0x0014 */ uint value1;
  /* 0x0018 */ uint value2;
  /* 0x001c */ uint value3;
  /* 0x0020 */ float value_f32_0;
  /* 0x0024 */ float value_f32_1;
  /* 0x0028 */ float value_f32_2;
  /* 0x002c */ float value_f32_3;
};

struct tint_module_vars_struct {
  const constant Uniforms_packed_vec3* uniforms;
  device U32s* indices;
  device F32s* positions;
  device AU32s* counters;
  device AI32s* LUT;
  device Dbg* dbg;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

void doIgnore(tint_array_lengths_struct tint_array_lengths, tint_module_vars_struct tint_module_vars) {
  uint g42 = (*tint_module_vars.uniforms).numTriangles;
  uint kj6 = (*tint_module_vars.dbg).value1;
  uint b53 = atomic_load_explicit((&(*tint_module_vars.counters).values[min(uint(0), (tint_array_lengths.tint_array_length_0_3 - 1u))]), memory_order_relaxed);
  uint rwg = (*tint_module_vars.indices).values[min(uint(0), (tint_array_lengths.tint_array_length_0_1 - 1u))];
  float rb5 = (*tint_module_vars.positions).values[min(uint(0), (tint_array_lengths.tint_array_length_0_2 - 1u))];
  int g55 = atomic_load_explicit((&(*tint_module_vars.LUT).values[min(uint(0), (tint_array_lengths.tint_array_length_0_4 - 1u))]), memory_order_relaxed);
}

void main_create_lut_inner(uint3 GlobalInvocationID, tint_module_vars_struct tint_module_vars) {
  tint_array_lengths_struct const v = tint_array_lengths_struct{.tint_array_length_0_3=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].z - 0u) / 4u), .tint_array_length_0_1=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 4u), .tint_array_length_0_2=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].y - 0u) / 4u), .tint_array_length_0_4=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].w - 0u) / 4u)};
  uint voxelIndex = GlobalInvocationID.x;
  doIgnore(v, tint_module_vars);
  uint maxVoxels = (((*tint_module_vars.uniforms).gridSize * (*tint_module_vars.uniforms).gridSize) * (*tint_module_vars.uniforms).gridSize);
  if ((voxelIndex >= maxVoxels)) {
    return;
  }
  uint numTriangles = atomic_load_explicit((&(*tint_module_vars.counters).values[min(voxelIndex, (v.tint_array_length_0_3 - 1u))]), memory_order_relaxed);
  int offset = -1;
  if ((numTriangles > 0u)) {
    offset = int(atomic_fetch_add_explicit((&(*tint_module_vars.dbg).offsetCounter), numTriangles, memory_order_relaxed));
  }
  atomic_store_explicit((&(*tint_module_vars.LUT).values[min(voxelIndex, (v.tint_array_length_0_4 - 1u))]), offset, memory_order_relaxed);
}

kernel void main_create_lut(uint3 GlobalInvocationID [[thread_position_in_grid]], const constant Uniforms_packed_vec3* uniforms [[buffer(0)]], device U32s* indices [[buffer(1)]], device F32s* positions [[buffer(2)]], device AU32s* counters [[buffer(3)]], device AI32s* LUT [[buffer(4)]], device Dbg* dbg [[buffer(5)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms, .indices=indices, .positions=positions, .counters=counters, .LUT=LUT, .dbg=dbg, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  main_create_lut_inner(GlobalInvocationID, tint_module_vars);
}
//
// main_sort_triangles
//
#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Uniforms_packed_vec3 {
  /* 0x0000 */ uint numTriangles;
  /* 0x0004 */ uint gridSize;
  /* 0x0008 */ uint pad1;
  /* 0x000c */ uint pad2;
  /* 0x0010 */ packed_float3 bbMin;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad;
  /* 0x0020 */ packed_float3 bbMax;
  /* 0x002c */ tint_array<int8_t, 4> tint_pad_1;
};

struct U32s {
  /* 0x0000 */ tint_array<uint, 1> values;
};

struct F32s {
  /* 0x0000 */ tint_array<float, 1> values;
};

struct AU32s {
  /* 0x0000 */ tint_array<atomic_uint, 1> values;
};

struct AI32s {
  /* 0x0000 */ tint_array<atomic_int, 1> values;
};

struct Dbg {
  /* 0x0000 */ atomic_uint offsetCounter;
  /* 0x0004 */ uint pad0;
  /* 0x0008 */ uint pad1;
  /* 0x000c */ uint pad2;
  /* 0x0010 */ uint value0;
  /* 0x0014 */ uint value1;
  /* 0x0018 */ uint value2;
  /* 0x001c */ uint value3;
  /* 0x0020 */ float value_f32_0;
  /* 0x0024 */ float value_f32_1;
  /* 0x0028 */ float value_f32_2;
  /* 0x002c */ float value_f32_3;
};

struct tint_module_vars_struct {
  const constant Uniforms_packed_vec3* uniforms;
  device U32s* indices;
  device F32s* positions;
  device AU32s* counters;
  device AI32s* LUT;
  device Dbg* dbg;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_2;
  uint tint_array_length_0_3;
  uint tint_array_length_0_1;
  uint tint_array_length_0_4;
};

float3 toVoxelPos(float3 position, tint_module_vars_struct tint_module_vars) {
  float3 bbMin = float3((*tint_module_vars.uniforms).bbMin.x, (*tint_module_vars.uniforms).bbMin.y, (*tint_module_vars.uniforms).bbMin.z);
  float3 bbMax = float3((*tint_module_vars.uniforms).bbMax.x, (*tint_module_vars.uniforms).bbMax.y, (*tint_module_vars.uniforms).bbMax.z);
  float3 bbSize = (bbMax - bbMin);
  float cubeSize = max(max(bbSize.x, bbSize.y), bbSize.z);
  float gridSize = float((*tint_module_vars.uniforms).gridSize);
  float gx = ((gridSize * (position.x - (*tint_module_vars.uniforms).bbMin.x)) / cubeSize);
  float gy = ((gridSize * (position.y - (*tint_module_vars.uniforms).bbMin.y)) / cubeSize);
  float gz = ((gridSize * (position.z - (*tint_module_vars.uniforms).bbMin.z)) / cubeSize);
  return float3(gx, gy, gz);
}

uint3 tint_v3f32_to_v3u32(float3 value) {
  return uint3(clamp(value, float3(0.0f), float3(4294967040.0f)));
}

uint toIndex1D(uint gridSize, float3 voxelPos) {
  uint3 icoord = tint_v3f32_to_v3u32(voxelPos);
  return ((icoord.x + (gridSize * icoord.y)) + ((gridSize * gridSize) * icoord.z));
}

float3 loadPosition(uint vertexIndex, tint_array_lengths_struct tint_array_lengths, tint_module_vars_struct tint_module_vars) {
  float3 position = float3((*tint_module_vars.positions).values[min(((3u * vertexIndex) + 0u), (tint_array_lengths.tint_array_length_0_2 - 1u))], (*tint_module_vars.positions).values[min(((3u * vertexIndex) + 1u), (tint_array_lengths.tint_array_length_0_2 - 1u))], (*tint_module_vars.positions).values[min(((3u * vertexIndex) + 2u), (tint_array_lengths.tint_array_length_0_2 - 1u))]);
  return position;
}

void doIgnore(tint_array_lengths_struct tint_array_lengths, tint_module_vars_struct tint_module_vars) {
  uint g42 = (*tint_module_vars.uniforms).numTriangles;
  uint kj6 = (*tint_module_vars.dbg).value1;
  uint b53 = atomic_load_explicit((&(*tint_module_vars.counters).values[min(uint(0), (tint_array_lengths.tint_array_length_0_3 - 1u))]), memory_order_relaxed);
  uint rwg = (*tint_module_vars.indices).values[min(uint(0), (tint_array_lengths.tint_array_length_0_1 - 1u))];
  float rb5 = (*tint_module_vars.positions).values[min(uint(0), (tint_array_lengths.tint_array_length_0_2 - 1u))];
  int g55 = atomic_load_explicit((&(*tint_module_vars.LUT).values[min(uint(0), (tint_array_lengths.tint_array_length_0_4 - 1u))]), memory_order_relaxed);
}

void main_sort_triangles_inner(uint3 GlobalInvocationID, tint_module_vars_struct tint_module_vars) {
  tint_array_lengths_struct const v = tint_array_lengths_struct{.tint_array_length_0_2=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].y - 0u) / 4u), .tint_array_length_0_3=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].z - 0u) / 4u), .tint_array_length_0_1=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].x - 0u) / 4u), .tint_array_length_0_4=(((*tint_module_vars.tint_storage_buffer_sizes)[0u].w - 0u) / 4u)};
  uint triangleIndex = GlobalInvocationID.x;
  doIgnore(v, tint_module_vars);
  if ((triangleIndex >= (*tint_module_vars.uniforms).numTriangles)) {
    return;
  }
  uint i0 = (*tint_module_vars.indices).values[min(((3u * triangleIndex) + 0u), (v.tint_array_length_0_1 - 1u))];
  uint i1 = (*tint_module_vars.indices).values[min(((3u * triangleIndex) + 1u), (v.tint_array_length_0_1 - 1u))];
  uint i2 = (*tint_module_vars.indices).values[min(((3u * triangleIndex) + 2u), (v.tint_array_length_0_1 - 1u))];
  float3 p0 = loadPosition(i0, v, tint_module_vars);
  float3 p1 = loadPosition(i1, v, tint_module_vars);
  float3 p2 = loadPosition(i2, v, tint_module_vars);
  float3 center = (((p0 + p1) + p2) / 3.0f);
  float3 voxelPos = toVoxelPos(center, tint_module_vars);
  uint voxelIndex = toIndex1D((*tint_module_vars.uniforms).gridSize, voxelPos);
  int triangleOffset = atomic_fetch_add_explicit((&(*tint_module_vars.LUT).values[min(voxelIndex, (v.tint_array_length_0_4 - 1u))]), 1, memory_order_relaxed);
}

kernel void main_sort_triangles(uint3 GlobalInvocationID [[thread_position_in_grid]], const constant Uniforms_packed_vec3* uniforms [[buffer(0)]], device U32s* indices [[buffer(1)]], device F32s* positions [[buffer(2)]], device AU32s* counters [[buffer(3)]], device AI32s* LUT [[buffer(4)]], device Dbg* dbg [[buffer(5)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.uniforms=uniforms, .indices=indices, .positions=positions, .counters=counters, .LUT=LUT, .dbg=dbg, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  main_sort_triangles_inner(GlobalInvocationID, tint_module_vars);
}
