#include <metal_stdlib>
using namespace metal;

struct tint_array_lengths_struct {
  uint tint_array_length_0_0;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct FSUniformData {
  tint_array<float4, 7> k;
  int2 size;
};

struct FSUniforms {
  tint_array<FSUniformData, 1> fsUniformData;
};

struct tint_module_vars_struct {
  thread uint* idx;
  const device FSUniforms* _storage;
};

void v(tint_array_lengths_struct tint_array_lengths, tint_module_vars_struct tint_module_vars) {
  int2 v_1 = int2(0);
  {
    uint2 tint_loop_idx = uint2(4294967295u);
    while(true) {
      if (all((tint_loop_idx == uint2(0u)))) {
        break;
      }
      if ((v_1.y >= (*tint_module_vars._storage).fsUniformData[min((*tint_module_vars.idx), (tint_array_lengths.tint_array_length_0_0 - 1u))].size.y)) {
        break;
      }
      {
        uint const tint_low_inc = (tint_loop_idx.x - 1u);
        tint_loop_idx.x = tint_low_inc;
        uint const tint_carry = uint((tint_low_inc == 4294967295u));
        tint_loop_idx.y = (tint_loop_idx.y - tint_carry);
      }
      continue;
    }
  }
}
