#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_struct {
  const device tint_array<uint, 1>* tint_member;
  const constant tint_array<uint4, 1>* tint_member_1;
};

struct tint_struct_1 {
  uint tint_member_2;
};

void v(uint v_1, tint_struct v_2) {
  int const v_3 = 0;
  int const v_4 = 0;
  int const v_5 = 0;
  uint const v_6 = (*v_2.tint_member)[min(v_1, (tint_struct_1{.tint_member_2=((*v_2.tint_member_1)[0u].x / 4u)}.tint_member_2 - 1u))];
}

kernel void tint_entry_point(uint v_8 [[thread_index_in_threadgroup]], const device tint_array<uint, 1>* v_9 [[buffer(0)]], const constant tint_array<uint4, 1>* v_10 [[buffer(30)]]) {
  tint_struct const v_11 = tint_struct{.tint_member=v_9, .tint_member_1=v_10};
  v(v_8, v_11);
}
