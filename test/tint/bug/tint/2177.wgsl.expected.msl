#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  device tint_array<uint, 1>* arr;
  const constant tint_array<uint4, 1>* tint_storage_buffer_sizes;
};

struct tint_array_lengths_struct {
  uint tint_array_length_0_0;
};

uint f2(device tint_array<uint, 1>* const p, uint tint_array_length) {
  return tint_array_length;
}

uint f1(device tint_array<uint, 1>* const p, uint tint_array_length) {
  return f2(p, tint_array_length);
}

uint f0(device tint_array<uint, 1>* const p, uint tint_array_length) {
  return f1(p, tint_array_length);
}

kernel void v(device tint_array<uint, 1>* arr [[buffer(0)]], const constant tint_array<uint4, 1>* tint_storage_buffer_sizes [[buffer(30)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.arr=arr, .tint_storage_buffer_sizes=tint_storage_buffer_sizes};
  tint_array_lengths_struct const v_1 = tint_array_lengths_struct{.tint_array_length_0_0=((*tint_module_vars.tint_storage_buffer_sizes)[0u].x / 4u)};
  device uint* const v_2 = (&(*tint_module_vars.arr)[min(uint(0), (v_1.tint_array_length_0_0 - 1u))]);
  (*v_2) = f0(tint_module_vars.arr, v_1.tint_array_length_0_0);
}
