#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct str {
  tint_array<int, 4> arr;
};

struct tint_module_vars_struct {
  thread str* P;
};

tint_array<int, 4> func(thread tint_array<int, 4>* const pointer) {
  return (*pointer);
}

kernel void v() {
  thread str P = {};
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.P=(&P)};
  tint_array<int, 4> const r = func((&(*tint_module_vars.P).arr));
}
