#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  threadgroup tint_array<int, 4>* v;
};

int foo(threadgroup int* const p) {
  threadgroup_barrier(mem_flags::mem_threadgroup);
  int const v_1 = (*p);
  threadgroup_barrier(mem_flags::mem_threadgroup);
  return v_1;
}

int bar(tint_module_vars_struct tint_module_vars) {
  return foo((&(*tint_module_vars.v)[0u]));
}
