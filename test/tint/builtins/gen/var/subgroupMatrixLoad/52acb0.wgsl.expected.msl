#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct SB_RW {
  /* 0x0000 */ tint_array<half, 1024> arg_0;
};

struct tint_module_vars_struct {
  device tint_array<half, 1024>* prevent_dce;
  device SB_RW* sb_rw;
};

simdgroup_half8x8 subgroupMatrixLoad_52acb0(tint_module_vars_struct tint_module_vars) {
  uint arg_1 = 1u;
  uint arg_3 = 8u;
  uint const v = arg_1;
  uint const v_1 = max(arg_3, 8u);
  simdgroup_half8x8 v_2 = make_filled_simdgroup_matrix<half, 8, 8>(0.0h);
  if ((((v + (v_1 * 7u)) + 8u) <= 1024u)) {
    simdgroup_half8x8 v_3 = make_filled_simdgroup_matrix<half, 8, 8>(0.0h);
    simdgroup_load(v_3, (&(*tint_module_vars.sb_rw).arg_0[v]), ulong(v_1), ulong2(0ul), true);
    v_2 = v_3;
  }
  simdgroup_half8x8 res = v_2;
  return res;
}

kernel void compute_main(device tint_array<half, 1024>* prevent_dce [[buffer(0)]], device SB_RW* sb_rw [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.prevent_dce=prevent_dce, .sb_rw=sb_rw};
  simdgroup_store(subgroupMatrixLoad_52acb0(tint_module_vars), (&(*tint_module_vars.prevent_dce)[0u]), ulong(64u), ulong2(0ul), false);
}
