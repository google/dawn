//
// fragment_main
//
#include <metal_stdlib>
using namespace metal;

struct tint_module_vars_struct {
  device half4* prevent_dce;
};

half4 smoothstep_c43ebd() {
  half4 arg_0 = half4(2.0h);
  half4 arg_1 = half4(4.0h);
  half4 arg_2 = half4(3.0h);
  half4 const v = arg_0;
  half4 const v_1 = clamp(((arg_2 - v) / (arg_1 - v)), half4(0.0h), half4(1.0h));
  half4 res = (v_1 * (v_1 * (half4(3.0h) - (half4(2.0h) * v_1))));
  return res;
}

fragment void fragment_main(device half4* prevent_dce [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.prevent_dce=prevent_dce};
  (*tint_module_vars.prevent_dce) = smoothstep_c43ebd();
}
//
// compute_main
//
#include <metal_stdlib>
using namespace metal;

struct tint_module_vars_struct {
  device half4* prevent_dce;
};

half4 smoothstep_c43ebd() {
  half4 arg_0 = half4(2.0h);
  half4 arg_1 = half4(4.0h);
  half4 arg_2 = half4(3.0h);
  half4 const v = arg_0;
  half4 const v_1 = clamp(((arg_2 - v) / (arg_1 - v)), half4(0.0h), half4(1.0h));
  half4 res = (v_1 * (v_1 * (half4(3.0h) - (half4(2.0h) * v_1))));
  return res;
}

kernel void compute_main(device half4* prevent_dce [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.prevent_dce=prevent_dce};
  (*tint_module_vars.prevent_dce) = smoothstep_c43ebd();
}
//
// vertex_main
//
#include <metal_stdlib>
using namespace metal;

struct VertexOutput {
  float4 pos;
  half4 prevent_dce;
};

struct vertex_main_outputs {
  float4 VertexOutput_pos [[position]];
  half4 VertexOutput_prevent_dce [[user(locn0)]] [[flat]];
};

half4 smoothstep_c43ebd() {
  half4 arg_0 = half4(2.0h);
  half4 arg_1 = half4(4.0h);
  half4 arg_2 = half4(3.0h);
  half4 const v = arg_0;
  half4 const v_1 = clamp(((arg_2 - v) / (arg_1 - v)), half4(0.0h), half4(1.0h));
  half4 res = (v_1 * (v_1 * (half4(3.0h) - (half4(2.0h) * v_1))));
  return res;
}

VertexOutput vertex_main_inner() {
  VertexOutput out = {};
  out.pos = float4(0.0f);
  out.prevent_dce = smoothstep_c43ebd();
  return out;
}

vertex vertex_main_outputs vertex_main() {
  VertexOutput const v_2 = vertex_main_inner();
  vertex_main_outputs tint_wrapper_result = {};
  tint_wrapper_result.VertexOutput_pos = v_2.pos;
  tint_wrapper_result.VertexOutput_prevent_dce = v_2.prevent_dce;
  return tint_wrapper_result;
}
