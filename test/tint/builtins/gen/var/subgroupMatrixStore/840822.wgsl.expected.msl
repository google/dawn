#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  threadgroup tint_array<half, 1024>* arg_0;
};

struct tint_symbol_1 {
  tint_array<half, 1024> tint_symbol;
};

void subgroupMatrixStore_840822(tint_module_vars_struct tint_module_vars) {
  uint arg_1 = 1u;
  simdgroup_half8x8 arg_2 = simdgroup_half8x8();
  uint arg_4 = 8u;
  uint const v = arg_1;
  simdgroup_half8x8 const v_1 = arg_2;
  uint const v_2 = max(arg_4, 8u);
  if ((((v + (v_2 * 7u)) + 8u) <= 1024u)) {
    simdgroup_store(v_1, (&(*tint_module_vars.arg_0)[v]), ulong(v_2), ulong2(0ul), true);
  }
}

void compute_main_inner(uint tint_local_index, tint_module_vars_struct tint_module_vars) {
  {
    uint v_3 = 0u;
    v_3 = tint_local_index;
    while(true) {
      uint const v_4 = v_3;
      if ((v_4 >= 1024u)) {
        break;
      }
      (*tint_module_vars.arg_0)[v_4] = 0.0h;
      {
        v_3 = (v_4 + 1u);
      }
      continue;
    }
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  subgroupMatrixStore_840822(tint_module_vars);
}

kernel void compute_main(uint tint_local_index [[thread_index_in_threadgroup]], threadgroup tint_symbol_1* v_5 [[threadgroup(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.arg_0=(&(*v_5).tint_symbol)};
  compute_main_inner(tint_local_index, tint_module_vars);
}
