#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct SB_RW {
  /* 0x0000 */ tint_array<half, 1024> arg_0;
};

struct tint_module_vars_struct {
  device SB_RW* sb_rw;
};

void subgroupMatrixStore_22077b(tint_module_vars_struct tint_module_vars) {
  uint arg_1 = 1u;
  simdgroup_half8x8 arg_2 = simdgroup_half8x8();
  uint arg_4 = 8u;
  uint const v = arg_1;
  simdgroup_half8x8 const v_1 = arg_2;
  uint const v_2 = max(arg_4, 8u);
  if ((((v + (v_2 * 7u)) + 8u) <= 1024u)) {
    simdgroup_store(v_1, (&(*tint_module_vars.sb_rw).arg_0[v]), ulong(v_2), ulong2(0ul), true);
  }
}

kernel void compute_main(device SB_RW* sb_rw [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.sb_rw=sb_rw};
  subgroupMatrixStore_22077b(tint_module_vars);
}
