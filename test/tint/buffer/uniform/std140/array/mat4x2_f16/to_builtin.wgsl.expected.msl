#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  const constant tint_array<half4x2, 4>* u;
  device half* s;
};

kernel void f(const constant tint_array<half4x2, 4>* u [[buffer(0)]], device half* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  half2x4 const t = transpose((*tint_module_vars.u)[2u]);
  half const l = length((*tint_module_vars.u)[0u][1u].yx);
  half const a = abs((*tint_module_vars.u)[0u][1u].yx.x);
  half const v = (t[0u].x + half(l));
  (*tint_module_vars.s) = (v + half(a));
}
