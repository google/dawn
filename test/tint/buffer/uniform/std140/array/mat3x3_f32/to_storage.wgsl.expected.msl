#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* u;
  device tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* s;
};

void tint_store_and_preserve_padding_1(device tint_array<tint_packed_vec3_f32_array_element, 3>* const target, float3x3 value_param) {
  (*target)[0u].packed = packed_float3(value_param[0u]);
  (*target)[1u].packed = packed_float3(value_param[1u]);
  (*target)[2u].packed = packed_float3(value_param[2u]);
}

void tint_store_and_preserve_padding(device tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const target, tint_array<float3x3, 4> value_param) {
  {
    uint v = 0u;
    v = 0u;
    while(true) {
      uint const v_1 = v;
      if ((v_1 >= 4u)) {
        break;
      }
      tint_store_and_preserve_padding_1((&(*target)[v_1]), value_param[v_1]);
      {
        v = (v_1 + 1u);
      }
      continue;
    }
  }
}

tint_array<float3x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const from) {
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_2 = (*from)[0u];
  float3x3 const v_3 = float3x3(float3(v_2[0u].packed), float3(v_2[1u].packed), float3(v_2[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_4 = (*from)[1u];
  float3x3 const v_5 = float3x3(float3(v_4[0u].packed), float3(v_4[1u].packed), float3(v_4[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_6 = (*from)[2u];
  float3x3 const v_7 = float3x3(float3(v_6[0u].packed), float3(v_6[1u].packed), float3(v_6[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_8 = (*from)[3u];
  return tint_array<float3x3, 4>{v_3, v_5, v_7, float3x3(float3(v_8[0u].packed), float3(v_8[1u].packed), float3(v_8[2u].packed))};
}

kernel void f(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* u [[buffer(0)]], device tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  tint_store_and_preserve_padding(tint_module_vars.s, tint_load_array_packed_vec3(tint_module_vars.u));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_9 = (*tint_module_vars.u)[2u];
  tint_store_and_preserve_padding_1((&(*tint_module_vars.s)[1u]), float3x3(float3(v_9[0u].packed), float3(v_9[1u].packed), float3(v_9[2u].packed)));
  (*tint_module_vars.s)[1u][0u].packed = packed_float3(float3((*tint_module_vars.u)[0u][1u].packed).zxy);
  (*tint_module_vars.s)[1u][0u].packed.x = (*tint_module_vars.u)[0u][1u].packed.x;
}
