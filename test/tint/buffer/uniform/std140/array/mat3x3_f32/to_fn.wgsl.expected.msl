#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* u;
  device float* s;
};

float a(tint_array<float3x3, 4> a_1) {
  return a_1[0u][0u].x;
}

float b(float3x3 m) {
  return m[0u].x;
}

float c(float3 v) {
  return v.x;
}

float d(float f_1) {
  return f_1;
}

tint_array<float3x3, 4> tint_load_array_packed_vec3(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* const from) {
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_1 = (*from)[0u];
  float3x3 const v_2 = float3x3(float3(v_1[0u].packed), float3(v_1[1u].packed), float3(v_1[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_3 = (*from)[1u];
  float3x3 const v_4 = float3x3(float3(v_3[0u].packed), float3(v_3[1u].packed), float3(v_3[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_5 = (*from)[2u];
  float3x3 const v_6 = float3x3(float3(v_5[0u].packed), float3(v_5[1u].packed), float3(v_5[2u].packed));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_7 = (*from)[3u];
  return tint_array<float3x3, 4>{v_2, v_4, v_6, float3x3(float3(v_7[0u].packed), float3(v_7[1u].packed), float3(v_7[2u].packed))};
}

kernel void f(const constant tint_array<tint_array<tint_packed_vec3_f32_array_element, 3>, 4>* u [[buffer(0)]], device float* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  float const v_8 = a(tint_load_array_packed_vec3(tint_module_vars.u));
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_9 = (*tint_module_vars.u)[1u];
  float const v_10 = (v_8 + b(float3x3(float3(v_9[0u].packed), float3(v_9[1u].packed), float3(v_9[2u].packed))));
  float const v_11 = (v_10 + c(float3((*tint_module_vars.u)[1u][0u].packed).zxy));
  (*tint_module_vars.s) = (v_11 + d(float3((*tint_module_vars.u)[1u][0u].packed).zxy.x));
}
