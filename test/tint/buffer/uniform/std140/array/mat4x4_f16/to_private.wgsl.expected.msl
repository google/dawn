#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  const constant tint_array<half4x4, 4>* u;
  device half* s;
  thread tint_array<half4x4, 4>* p;
};

kernel void f(const constant tint_array<half4x4, 4>* u [[buffer(0)]], device half* s [[buffer(1)]]) {
  thread tint_array<half4x4, 4> p = {};
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s, .p=(&p)};
  (*tint_module_vars.p) = (*tint_module_vars.u);
  (*tint_module_vars.p)[1u] = (*tint_module_vars.u)[2u];
  (*tint_module_vars.p)[1u][0u] = (*tint_module_vars.u)[0u][1u].ywxz;
  (*tint_module_vars.p)[1u][0u].x = (*tint_module_vars.u)[0u][1u].x;
  (*tint_module_vars.s) = (*tint_module_vars.p)[1u][0u].x;
}
