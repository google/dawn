#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct S {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ float4x4 m;
  /* 0x0050 */ tint_array<int8_t, 48> tint_pad_1;
  /* 0x0080 */ int after;
  /* 0x0084 */ tint_array<int8_t, 60> tint_pad_2;
};

struct tint_module_vars_struct {
  const constant tint_array<S, 4>* u;
  thread tint_array<S, 4>* p;
};

kernel void f(const constant tint_array<S, 4>* u [[buffer(0)]]) {
  thread tint_array<S, 4> p = {};
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .p=(&p)};
  (*tint_module_vars.p) = (*tint_module_vars.u);
  (*tint_module_vars.p)[1u] = (*tint_module_vars.u)[2u];
  (*tint_module_vars.p)[3u].m = (*tint_module_vars.u)[2u].m;
  (*tint_module_vars.p)[1u].m[0u] = (*tint_module_vars.u)[0u].m[1u].ywxz;
}
