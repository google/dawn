#include <metal_stdlib>
using namespace metal;

struct S {
  int before;
  half4x3 m;
  int after;
};

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad_1;
};

struct S_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 4> tint_pad;
  /* 0x0008 */ tint_array<tint_packed_vec3_f16_array_element, 4> m;
  /* 0x0028 */ tint_array<int8_t, 24> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

struct tint_module_vars_struct {
  const constant tint_array<S_packed_vec3, 4>* u;
  thread tint_array<S, 4>* p;
};

S tint_load_struct_packed_vec3(const constant S_packed_vec3* const from) {
  int const v = (*from).before;
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_1 = (*from).m;
  half4x3 const v_2 = half4x3(half3(v_1[0u].packed), half3(v_1[1u].packed), half3(v_1[2u].packed), half3(v_1[3u].packed));
  return S{.before=v, .m=v_2, .after=(*from).after};
}

tint_array<S, 4> tint_load_array_packed_vec3(const constant tint_array<S_packed_vec3, 4>* const from) {
  S const v_3 = tint_load_struct_packed_vec3((&(*from)[0u]));
  S const v_4 = tint_load_struct_packed_vec3((&(*from)[1u]));
  S const v_5 = tint_load_struct_packed_vec3((&(*from)[2u]));
  return tint_array<S, 4>{v_3, v_4, v_5, tint_load_struct_packed_vec3((&(*from)[3u]))};
}

kernel void f(const constant tint_array<S_packed_vec3, 4>* u [[buffer(0)]]) {
  thread tint_array<S, 4> p = {};
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .p=(&p)};
  (*tint_module_vars.p) = tint_load_array_packed_vec3(tint_module_vars.u);
  (*tint_module_vars.p)[1u] = tint_load_struct_packed_vec3((&(*tint_module_vars.u)[2u]));
  tint_array<tint_packed_vec3_f16_array_element, 4> const v_6 = (*tint_module_vars.u)[2u].m;
  (*tint_module_vars.p)[3u].m = half4x3(half3(v_6[0u].packed), half3(v_6[1u].packed), half3(v_6[2u].packed), half3(v_6[3u].packed));
  (*tint_module_vars.p)[1u].m[0u] = half3((*tint_module_vars.u)[0u].m[1u].packed).zxy;
}
