#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad_1;
};

struct S_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ tint_array<tint_packed_vec3_f32_array_element, 2> m;
  /* 0x0030 */ tint_array<int8_t, 16> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

struct tint_module_vars_struct {
  const constant tint_array<S_packed_vec3, 4>* u;
};

kernel void f(const constant tint_array<S_packed_vec3, 4>* u [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u};
  tint_array<tint_packed_vec3_f32_array_element, 2> const v = (*tint_module_vars.u)[2u].m;
  float3x2 const t = transpose(float2x3(float3(v[0u].packed), float3(v[1u].packed)));
  float const l = length(float3((*tint_module_vars.u)[0u].m[1u].packed).zxy);
  float const a = abs(float3((*tint_module_vars.u)[0u].m[1u].packed).zxy.x);
}
