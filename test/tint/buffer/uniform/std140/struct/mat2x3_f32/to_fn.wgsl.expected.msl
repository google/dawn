#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct S {
  int before;
  float2x3 m;
  int after;
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad_1;
};

struct S_packed_vec3 {
  /* 0x0000 */ int before;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ tint_array<tint_packed_vec3_f32_array_element, 2> m;
  /* 0x0030 */ tint_array<int8_t, 16> tint_pad_2;
  /* 0x0040 */ int after;
  /* 0x0044 */ tint_array<int8_t, 60> tint_pad_3;
};

struct tint_module_vars_struct {
  const constant tint_array<S_packed_vec3, 4>* u;
};

void a(tint_array<S, 4> a_1) {
}

void b(S s) {
}

void c(float2x3 m) {
}

void d(float3 v) {
}

void e(float f_1) {
}

S tint_load_struct_packed_vec3(const constant S_packed_vec3* const from) {
  int const v_1 = (*from).before;
  tint_array<tint_packed_vec3_f32_array_element, 2> const v_2 = (*from).m;
  float2x3 const v_3 = float2x3(float3(v_2[0u].packed), float3(v_2[1u].packed));
  return S{.before=v_1, .m=v_3, .after=(*from).after};
}

tint_array<S, 4> tint_load_array_packed_vec3(const constant tint_array<S_packed_vec3, 4>* const from) {
  S const v_4 = tint_load_struct_packed_vec3((&(*from)[0u]));
  S const v_5 = tint_load_struct_packed_vec3((&(*from)[1u]));
  S const v_6 = tint_load_struct_packed_vec3((&(*from)[2u]));
  return tint_array<S, 4>{v_4, v_5, v_6, tint_load_struct_packed_vec3((&(*from)[3u]))};
}

kernel void f(const constant tint_array<S_packed_vec3, 4>* u [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u};
  a(tint_load_array_packed_vec3(tint_module_vars.u));
  b(tint_load_struct_packed_vec3((&(*tint_module_vars.u)[2u])));
  tint_array<tint_packed_vec3_f32_array_element, 2> const v_7 = (*tint_module_vars.u)[2u].m;
  c(float2x3(float3(v_7[0u].packed), float3(v_7[1u].packed)));
  d(float3((*tint_module_vars.u)[0u].m[1u].packed).zxy);
  e(float3((*tint_module_vars.u)[0u].m[1u].packed).zxy.x);
}
