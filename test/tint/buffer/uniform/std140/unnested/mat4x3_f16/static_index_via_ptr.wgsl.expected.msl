#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_packed_vec3_f16_array_element, 4>* m;
};

kernel void f(const constant tint_array<tint_packed_vec3_f16_array_element, 4>* m [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.m=m};
  const constant tint_array<tint_packed_vec3_f16_array_element, 4>* const p_m = tint_module_vars.m;
  const constant packed_half3* const p_m_1 = (&(*p_m)[1u].packed);
  tint_array<tint_packed_vec3_f16_array_element, 4> const v = (*p_m);
  half4x3 const l_m = half4x3(half3(v[0u].packed), half3(v[1u].packed), half3(v[2u].packed), half3(v[3u].packed));
  half3 const l_m_1 = half3((*p_m_1));
}
