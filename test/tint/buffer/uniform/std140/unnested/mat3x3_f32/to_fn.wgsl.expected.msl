#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f32_array_element {
  /* 0x0000 */ packed_float3 packed;
  /* 0x000c */ tint_array<int8_t, 4> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_packed_vec3_f32_array_element, 3>* u;
};

void a(float3x3 m) {
}

void b(float3 v) {
}

void c(float f_1) {
}

kernel void f(const constant tint_array<tint_packed_vec3_f32_array_element, 3>* u [[buffer(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u};
  tint_array<tint_packed_vec3_f32_array_element, 3> const v_1 = (*tint_module_vars.u);
  a(float3x3(float3(v_1[0u].packed), float3(v_1[1u].packed), float3(v_1[2u].packed)));
  b(float3((*tint_module_vars.u)[1u].packed));
  b(float3((*tint_module_vars.u)[1u].packed).zxy);
  c((*tint_module_vars.u)[1u].packed.x);
  c(float3((*tint_module_vars.u)[1u].packed).zxy.x);
}
