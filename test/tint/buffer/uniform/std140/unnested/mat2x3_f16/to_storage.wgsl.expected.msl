#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_packed_vec3_f16_array_element {
  /* 0x0000 */ packed_half3 packed;
  /* 0x0006 */ tint_array<int8_t, 2> tint_pad;
};

struct tint_module_vars_struct {
  const constant tint_array<tint_packed_vec3_f16_array_element, 2>* u;
  device tint_array<tint_packed_vec3_f16_array_element, 2>* s;
};

void tint_store_and_preserve_padding(device tint_array<tint_packed_vec3_f16_array_element, 2>* const target, half2x3 value_param) {
  (*target)[0u].packed = packed_half3(value_param[0u]);
  (*target)[1u].packed = packed_half3(value_param[1u]);
}

kernel void f(const constant tint_array<tint_packed_vec3_f16_array_element, 2>* u [[buffer(0)]], device tint_array<tint_packed_vec3_f16_array_element, 2>* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  tint_array<tint_packed_vec3_f16_array_element, 2> const v = (*tint_module_vars.u);
  tint_store_and_preserve_padding(tint_module_vars.s, half2x3(half3(v[0u].packed), half3(v[1u].packed)));
  (*tint_module_vars.s)[1u].packed = packed_half3(half3((*tint_module_vars.u)[0u].packed));
  (*tint_module_vars.s)[1u].packed = packed_half3(half3((*tint_module_vars.u)[0u].packed).zxy);
  (*tint_module_vars.s)[0u].packed.y = (*tint_module_vars.u)[1u].packed.x;
}
