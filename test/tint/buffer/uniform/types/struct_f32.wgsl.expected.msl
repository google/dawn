#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct Inner_packed_vec3 {
  /* 0x0000 */ float scalar_f32;
  /* 0x0004 */ tint_array<int8_t, 12> tint_pad;
  /* 0x0010 */ packed_float3 vec3_f32;
  /* 0x001c */ tint_array<int8_t, 4> tint_pad_1;
  /* 0x0020 */ float2x4 mat2x4_f32;
};

struct Inner {
  float scalar_f32;
  float3 vec3_f32;
  float2x4 mat2x4_f32;
};

struct S_packed_vec3 {
  /* 0x0000 */ Inner_packed_vec3 inner;
};

struct S {
  Inner inner;
};

struct tint_module_vars_struct {
  const constant S_packed_vec3* u;
  device S_packed_vec3* s;
};

void tint_store_and_preserve_padding_1(device Inner_packed_vec3* const target, Inner value_param) {
  (*target).scalar_f32 = value_param.scalar_f32;
  (*target).vec3_f32 = packed_float3(value_param.vec3_f32);
  (*target).mat2x4_f32 = value_param.mat2x4_f32;
}

void tint_store_and_preserve_padding(device S_packed_vec3* const target, S value_param) {
  tint_store_and_preserve_padding_1((&(*target).inner), value_param.inner);
}

Inner tint_load_struct_packed_vec3_1(const constant Inner_packed_vec3* const from) {
  return Inner{.scalar_f32=(*from).scalar_f32, .vec3_f32=float3((*from).vec3_f32), .mat2x4_f32=(*from).mat2x4_f32};
}

S tint_load_struct_packed_vec3(const constant S_packed_vec3* const from) {
  return S{.inner=tint_load_struct_packed_vec3_1((&(*from).inner))};
}

kernel void v(const constant S_packed_vec3* u [[buffer(0)]], device S_packed_vec3* s [[buffer(1)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.u=u, .s=s};
  S const x = tint_load_struct_packed_vec3(tint_module_vars.u);
  tint_store_and_preserve_padding(tint_module_vars.s, x);
}
