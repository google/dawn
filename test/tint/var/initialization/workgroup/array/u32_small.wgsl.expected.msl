#include <metal_stdlib>
using namespace metal;

template<typename T, size_t N>
struct tint_array {
  const constant T& operator[](size_t i) const constant { return elements[i]; }
  device T& operator[](size_t i) device { return elements[i]; }
  const device T& operator[](size_t i) const device { return elements[i]; }
  thread T& operator[](size_t i) thread { return elements[i]; }
  const thread T& operator[](size_t i) const thread { return elements[i]; }
  threadgroup T& operator[](size_t i) threadgroup { return elements[i]; }
  const threadgroup T& operator[](size_t i) const threadgroup { return elements[i]; }
  T elements[N];
};

struct tint_module_vars_struct {
  threadgroup tint_array<int, 3>* zero;
};

struct tint_symbol_1 {
  tint_array<int, 3> tint_symbol;
};

void main_inner(uint tint_local_index, tint_module_vars_struct tint_module_vars) {
  if ((tint_local_index < 3u)) {
    (*tint_module_vars.zero)[tint_local_index] = 0;
  }
  threadgroup_barrier(mem_flags::mem_threadgroup);
  tint_array<int, 3> v = (*tint_module_vars.zero);
}

kernel void v_1(uint tint_local_index [[thread_index_in_threadgroup]], threadgroup tint_symbol_1* v_2 [[threadgroup(0)]]) {
  tint_module_vars_struct const tint_module_vars = tint_module_vars_struct{.zero=(&(*v_2).tint_symbol)};
  main_inner(tint_local_index, tint_module_vars);
}
